import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { OrderService } from '../order.service';
import { Router } from '@angular/router';
import { CartService } from '../cart.service';
import { PaymentService } from '../payment.service';



@Component({
  selector: 'app-payment',
  imports: [FormsModule, CommonModule],
  templateUrl: './payment.component.html',
  styleUrl: './payment.component.css'
})
export class PaymentComponent implements OnInit {
  paymentData = { orderId: 0, paymentMethod: '', amount: 0 };

  // State for UI elements
  isLoading: boolean = false;
  showSuccessPopup: boolean = false;
  deliveryNotification: { message: string, status: string } | null = null;
  customAlertMessage: string | null = null; // For custom alerts

  // For conditional card details (optional, but good for UI)
  cardDetails = {
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardHolderName: ''
  };

  constructor(
    private paymentService: PaymentService,
    private cartService: CartService,
    private router: Router,
    private orderService: OrderService // Assuming you have an OrderService
  ) {}

  ngOnInit(): void {
    this.paymentData.amount = this.cartService.getTotalPrice();
    // In a real scenario, orderId would be generated by an order creation API.
    // For this example, we'll generate a simple mock ID or use a placeholder.
    this.paymentData.orderId = 1; // Mock Order ID
  }
  

  processPayment() {
    // Basic client-side validation
    if (!this.paymentData.paymentMethod || this.paymentData.amount <= 0) {
      this.showCustomAlert('Please select a payment method and ensure the amount is valid.');
      return;
    }

    // Add more specific validation for card details if applicable
    if (this.paymentData.paymentMethod === 'Credit Card' || this.paymentData.paymentMethod === 'Debit Card') {
      if (!this.cardDetails.cardNumber || !this.cardDetails.expiryDate || !this.cardDetails.cvv || !this.cardDetails.cardHolderName) {
        this.showCustomAlert('Please fill in all card details.');
        return;
      }
      // Add more robust validation for card number, expiry, CVV (regex, length checks)
    }

    this.isLoading = true; // Show loading overlay

    // Simulate API call for payment
    this.paymentService.processPayment(this.paymentData).subscribe({
      next: (response) => {
        console.log('✅ Payment successful:', response);
        this.isLoading = false; // Hide loading overlay

        this.deliveryNotification = {
          message: "Your payment was successful! Your order is being prepared and a delivery partner will be assigned shortly.",
          status: "Successful"
        };
        this.showSuccessPopup = true; // Show success popup

        this.cartService.clearCart(); // Clear the cart after successful payment

        const trackingOrderId = this.paymentData.orderId;

        // Hide popup and navigate after a short delay
        setTimeout(() => {
          this.showSuccessPopup = false;
          this.router.navigate(['/delivery-tracking', trackingOrderId]);
        }, 3000); // Show popup for 3 seconds
      },
      error: (error) => {
        console.error('❌ Payment failed:', error);
        this.isLoading = false; // Hide loading overlay
        this.showCustomAlert('Payment failed. Please try again or choose a different method.');
        this.deliveryNotification = {
            message: "Payment Failed.",
            status: "Failed"
          };
      }
    });
  }

  // Helper function to display custom alerts
  showCustomAlert(message: string): void {
    this.customAlertMessage = message;
  }

  // Optional: Function to close the success popup manually if needed
  // closeSuccessPopup(): void {
  //   this.showSuccessPopup = false;
  //   const trackingOrderId = this.paymentData.orderId;
  //   this.router.navigate(['/delivery-tracking', trackingOrderId]);
  // }
}